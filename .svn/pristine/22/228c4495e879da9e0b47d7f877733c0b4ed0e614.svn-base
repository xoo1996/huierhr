/* Generated by Together */

package org.radf.plat.sieaf.soap.encoding.deser;


/**<p>Description:soap消息解码类，提供解码过程的上
 * 下文环境，控制解码过程</p>
 * <p>Copyright: Copyright (c) 2002 by LBS Co., Ltd.</p>
 * <p>Company: LBS</p>
 * @author chenshuichao
 * @version 1.0
 */

import java.io.StringReader;
import java.util.ArrayList;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;

import org.radf.plat.util.exception.WebException;

public class DeserializationContextImpl
		extends DefaultHandler
		implements DeserializationContext {

	/**
	 *  @see org.xml.sax.ContentHandler#endDocument()
	 */
	public void endDocument() throws SAXException {


	}

	/**
	 * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String)
	 */
	public void endElement(String namespaceURI, String localName, String qName)
			throws SAXException {
		SOAPHandler handler = popElementHandler();
		if (handler != null) {
			handler.endElement(namespaceURI, localName, qName, this);
		}

		if (topHandler != null)
			topHandler.endChild(namespaceURI, localName);

	}

	/**
	 * @see org.xml.sax.ContentHandler#startDocument()
	 */
	public void startDocument() throws SAXException {

	}

	/**
	 * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
	 */
	public void startElement(
			String namespaceURI,
   String localName,
   String qName,
   Attributes atts)
			throws SAXException {

		SOAPHandler nextHandler = null;
		String prefix = "";
//		System.out.println("============begin Deserilizer startElement ============");
//		System.out.println("\n namespaceURI : " + namespaceURI);
//		System.out.println("\n localName : " + localName);
//		System.out.println("\n qName : " + qName);

		if (topHandler != null) {
			nextHandler =
					topHandler.startChild(namespaceURI, qName, prefix, atts, this);
		}
//		System.out.println("\nTopHandler from startElement  :" + topHandler);
//		System.out.println("\nnextHandler from startChild  :" + nextHandler);
		if (nextHandler == null) {

			nextHandler = (SOAPHandler) getDeserializer(qName);
		}

//		System.out.println("============after Deserilizer startElement============  ");
		if (nextHandler != null) {
			pushElementHandler(nextHandler);
			nextHandler.startElement(namespaceURI, localName, prefix, atts);
		}

	}
	/**
	 * 获得解码子
	 */
	public Deserializer getDeserializer(String qName) {

		Deserializer handler = maps.getDeserializer(qName);
		return handler;
	}

 /* 解码具体过程
	* @see org.radf.plat.soap.encoding.deser.DeserializationContext#deserialize(java.lang.String)
  */
	public void deserialize(String xmlString) throws WebException {

		SAXParserFactory spf = SAXParserFactory.newInstance();
		SAXParser saxParser = null;
		XMLReader reader = null;
		init();
		//		bug(maps.toString());
		try {
			// 创建一个SAXParser解析器对象
			saxParser = spf.newSAXParser();
			reader = saxParser.getXMLReader();

		} catch (Exception ex) {
			throw new WebException("sax parser load error");
		}
		try {

			StringReader sr = new StringReader(xmlString);
			//注册handler，并进行解析
			InputSource input = new org.xml.sax.InputSource(sr);

			saxParser.parse(input, this);

		} catch (Exception ioe) {
			throw new WebException("IO error");
		}
	}

 /* 初始化
	* @see org.radf.plat.soap.encoding.deser.DeserializationContext#init()
  */
	public void init() {
		maps = new QnameMappings();

		maps.init();
		handlerStack = new ArrayList();
		topHandler = null;
		value = null;

	}
	/**
	 * 压入栈中
	 * @param handler
	 */
	private void pushElementHandler(SOAPHandler handler) {

		if (topHandler != null)
	      handlerStack.add(topHandler);

         topHandler = handler;
	}
	/**
	 * 弹出栈
	 * @return SOAPHandler
	 */
	private SOAPHandler popElementHandler() {
		SOAPHandler result = topHandler;
		int size = handlerStack.size();
		if (size > 0)
	         topHandler = (SOAPHandler) handlerStack.remove(size - 1);
        else
	         topHandler = null;
        return result;
	}

	/**
	 * Returns the value.
	 * @return Object
	 */
	public Object getValue() {
		return value;
	}

	/**
	 * Sets the value.
	 * @param value The value to set
	 */
	public void setValue(Object value) {
		this.value = value;
	}

	private SOAPHandler topHandler;
	private ArrayList handlerStack;
	private QnameMappings maps;
	private Object value;

}